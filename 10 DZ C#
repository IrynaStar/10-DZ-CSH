namespace Classes
{
    // Интерфейс для сравнения студентов
    interface IComparable<T>
    {
        int CompareTo(T other);
    }

    // Интерфейс для компаратора сортировки студентов
    interface IComparer<T>
    {
        int Compare(T x, T y);
    }

    // Класс Student реализует интерфейс IComparable<Student>
    class Student : IComparable<Student>
    {
        private string lastName;
        private string firstName;
        private string patronymic;
        private DateTime dateOfBirth;
        private string homeAddress;
        private string phoneNumber;
        private List<int> gradesTests = new List<int>();
        private List<int> gradesCourseworks = new List<int>();
        private List<int> gradesExams = new List<int>();

        // Конструкторы
        public Student() : this("Иванов", "Иван") { }

        public Student(string lastName, string firstName) : this(lastName, firstName, "", DateTime.Now, "Косая алея", "09305553344") { }

        public Student(string lastName, string firstName, string patronymic, DateTime dateOfBirth, string homeAddress, string phoneNumber)
        {
            SetLastName(lastName);
            SetFirstName(firstName);
            SetPatronymic(patronymic);
            SetDateOfBirth(dateOfBirth);
            SetHomeAddress(homeAddress);
            SetPhoneNumber(phoneNumber);
            Console.WriteLine("Основной конструктор!");
        }

        // Методы установки значений
        public void SetLastName(string lastName)
        {
            this.lastName = lastName;
        }

        public void SetFirstName(string firstName)
        {
            this.firstName = firstName;
        }

        public void SetPatronymic(string patronymic)
        {
            this.patronymic = patronymic;
        }

        public void SetDateOfBirth(DateTime dateOfBirth)
        {
            this.dateOfBirth = dateOfBirth;
        }

        public void SetHomeAddress(string homeAddress)
        {
            if (!string.IsNullOrEmpty(homeAddress))
                this.homeAddress = homeAddress;
        }

        public void SetPhoneNumber(string phoneNumber)
        {
            this.phoneNumber = phoneNumber;
        }

        // Методы получения значений
        public string GetLastName()
        {
            return lastName;
        }

        public string GetFirstName()
        {
            return firstName;
        }

        public string GetPatronymic()
        {
            return patronymic;
        }

        public DateTime GetDateOfBirth()
        {
            return dateOfBirth;
        }

        public string GetHomeAddress()
        {
            return homeAddress;
        }

        public string GetPhoneNumber()
        {
            return phoneNumber;
        }

        // Методы для работы с оценками
        public List<int> GetGradesTests()
        {
            return gradesTests;
        }

        public List<int> GetGradesCourseworks()
        {
            return gradesCourseworks;
        }

        public List<int> GetGradesExams()
        {
            return gradesExams;
        }

        public void AddTestRate(int rate)
        {
            gradesTests.Add(rate);
        }

        public void AddCourseworkRate(int rate)
        {
            gradesCourseworks.Add(rate);
        }

        public void AddExamRate(int rate)
        {
            gradesExams.Add(rate);
        }

        // Метод для отображения информации о студенте
        public void DisplayStudentInfo()
        {
            Console.WriteLine("Student Information:");
            Console.WriteLine("Name: " + lastName + " " + firstName + " " + patronymic);
            Console.WriteLine("Date of Birth: " + dateOfBirth.ToShortDateString());
            Console.WriteLine("Home Address: " + homeAddress);
            Console.WriteLine("Phone Number: " + phoneNumber);
            Console.WriteLine("Grades:");
            Console.WriteLine("Tests:");
            foreach (int grade in gradesTests)
            {
                Console.Write(grade + " ");
            }
            Console.WriteLine();
            Console.WriteLine("Courseworks:");
            foreach (int grade in gradesCourseworks)
            {
                Console.Write(grade + " ");
            }
            Console.WriteLine();
            Console.WriteLine("Exams:");
            foreach (int grade in gradesExams)
            {
                Console.Write(grade + " ");
            }
            Console.WriteLine();
        }

        // Реализация метода CompareTo для сравнения студентов
        public int CompareTo(Student other)
        {
            int lastNameComparison = this.lastName.CompareTo(other.lastName);
            if (lastNameComparison == 0)
            {
                return this.firstName.CompareTo(other.firstName);
            }
            return lastNameComparison;
        }

        // Вложенный класс для сравнения по дате рождения
        public class DateOfBirthComparer : IComparer<Student>
        {
            public int Compare(Student x, Student y)
            {
                return x.dateOfBirth.CompareTo(y.dateOfBirth);
            }
        }

        // Метод сортировки списка студентов по заданному критерию
        public static void Sort(List<Student> students, IComparer<Student> comparer)
        {
            students.Sort((x, y) => comparer.Compare(x, y));
        }

        // Метод поиска студента по заданному условию
        public static Student Search(List<Student> students, Predicate<Student> match)
        {
            return students.Find(match);
        }

        // Метод Main для демонстрации работы
        public class Program
        {
            public static void Main()
            {
                List<Student> students = new List<Student>
                {
                    new Student("Иванов", "Иван", "Иванович", new DateTime(1990, 5, 15), "Косая алея", "09305553344"),
                    new Student("Петров", "Петр", "Петрович", new DateTime(1985, 8, 25), "Центральная улица", "0987654321"),
                    new Student("Сидоров", "Сидор", "Сидорович", new DateTime(1995, 3, 10), "Свободы проспект", "06611223344")
                };

                // Сортировка студентов по дате рождения
                Sort(students, new Student.DateOfBirthComparer());

                Console.WriteLine("Сортировка по дате рождения:");
                foreach (var student in students)
                {
                    Console.WriteLine("Фамилия: " + student.GetLastName() + ", Имя: " + student.GetFirstName() + ", Дата рождения: " + student.GetDateOfBirth().ToShortDateString());
                }

                // Поиск студента по имени
                Student foundStudent = Search(students, s => s.GetFirstName() == "Петр");

                if (foundStudent != null)
                {
                    Console.WriteLine("Найден студент: Фамилия: " + foundStudent.GetLastName() + ", Имя: " + foundStudent.GetFirstName() + ", Дата рождения: " + foundStudent.GetDateOfBirth().ToShortDateString());
                }
                else
                {
                    Console.WriteLine("Студент не найден.");
                }
            }
        }
    }
}
